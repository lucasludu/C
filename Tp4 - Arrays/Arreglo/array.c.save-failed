#include "array.h"

void menu()
{
    printf("\n\t[ 01 ] - Cargar arreglo, cantidad ingresada y mostrar por pantalla, sumar todo el arreglo\n");
    printf("\n\t[ 02 ] - Cargar arreglo, mostrarlo y pasarlo a una pila\n");
    printf("\n\t[ 03 ] -\n");
    printf("\n\t[ 04 ] -\n");
    printf("\n\t[ 05 ] -\n");
    printf("\n\t[ 06 ] -\n");
    printf("\n\t[ 07 ] -\n");
    printf("\n\t[ 08 ] -\n");
    printf("\n\t[ 09 ] -\n");
    printf("\n\t[ 10 ] -\n");
    printf("\n\t[ 11 ] -\n");
    printf("\n\n\t\t\t[ 0 ] - SALIR\n");
}

void menuCarga()
{
    printf("\n\t[ 1 ] - INT\n");
    printf("\n\t[ 2 ] - FLOAT\n");
    printf("\n\t[ 3 ] - CHAR\n");
    printf("\n\t\t[ ESC ] - SALIR\n");
}

/***********************************************
 * \brief CARGAR ARREGLO DE ENTERO MANUALMENTE
 * \param ARREGLO
 * \param VALIDO
 * \param DIMENCION
 * \return VALIDO
 ***********************************************/

int cargaArregloIntManual (int a[], int v, int dim)
{
    int num;
    char op;

    do
    {
        system("cls");

        printf("\nIngrese entero:\n");
        scanf("%d", &num);
        a[v] = num;

        v++;
        printf("\n\t\tESC para salir......\n");
        op = getch();
        system("cls");

    } while (op != 27);

    return v;
}

/***********************************************
 * \brief CARGAR ARREGLO DE ENTERO RANDOM
 * \param ARREGLO
 * \param VALIDO
 * \param DIMENCION
 * \return VALIDO
 ***********************************************/

int cargaArregloIntRandom (int a[], int v, int dim)
{
    dim = rand() % DIM;
    int num;

    printf("\nArreglo cargado\n");

    for (v = 0; v < dim; v++)
    {
        num = rand() % (MAX - MIN + 1) + MIN;
        a[v] = num;
    }
    return v;
}

/***********************************************
 * \brief TIPO DE CARGA DE ENTERO.
 * \param ARREGLO
 * \param VALIDO
 * \param DIMENCION
 * \return VALIDOS
 ***********************************************/

int tipoCargaInt (int a[], int v, int dim)
{
    char op;
    do {
        system("cls");
        printf("\n\t[ 1 ] - MANUAL\n");
        printf("\n\t[ 2 ] - RANDOM\n");
        printf("\n\t\t[ ESC ] - SALIR\n");

        op = getch();
        system("cls");

        switch (op)
        {
        case '1':

            v = cargaArregloIntManual(a, v, dim);

            break;

        case '2':

            v = cargaArregloIntRandom(a, v, dim);

            break;

        default:

            printf("\nFIN DE CARGA\n");
        }
        system("pause > arch");

    } while (op != 27);

    return v;
}

/***********************************************
 * \brief MUESTRA ARREGLO DE ENTERO
 * \param ARREGLO
 * \param VALIDO
 * \return VOID
 ***********************************************/

void muestraArregloInt (int a[], int v)
{
    int i;

    printf("\n\nArreglo\n");

    for (i = 0; i < v; i++)
    {
        if (i % 15 == 0)
        {
            printf("\n");
        }
        printf(" %3d |", a[i]);
    }
}

/***********************************************
 * \brief CARGAR ARREGLO REAL MANUALMENTE
 * \param ARREGLO
 * \param VALIDO
 * \param DIMENCION
 * \return VALIDO
 ***********************************************/

float cargaArregloFloatManual (float a[], int v, int dim)
{
    char opcion;

    while (v < dim && opcion != 27)
    {
        system("cls");
        printf("\nIngrese el n%cmero REAL: ", 163);
        fflush(stdin);
        scanf("%f", &a[v]);
        v++;

        printf("\n\t\tESC para salir.......\n");
        opcion = getch();
        system("cls");
    }

    return v;

}

/***********************************************
 * \brief CARGAR ARREGLO REAL RANDOM
 * \param ARREGLO
 * \param VALIDO
 * \param DIMENCION
 * \return VALIDO
 ***********************************************/

float cargaArregloFloatRandom (float a[], int v, int dim)
{
    float num;
    dim = rand() % DIM;

    printf("\nArreglo cargado\n");

    for (v = 0; v < dim; v++)
    {
        num = (rand() % (MAX - MIN + 1) + MIN);
        a[v] = num/10;
    }
    return v;
}

/***********************************************
 * \brief TIPO DE CARGA DE REALES.
 * \param ARREGLO
 * \param VALIDO
 * \param DIMENCION
 * \return VALIDOS
 ***********************************************/

float tipoCargaFloat (float a[], int v, int dim)
{
    char op;
    do {
        system("cls");
        printf("\n\t[ 1 ] - MANUAL\n");
        printf("\n\t[ 2 ] - RANDOM\n");
        printf("\n\t\t[ ESC ] - SALIR\n");

        op = getch();
        system("cls");

        switch (op)
        {
        case '1':

            v = cargaArregloFloatManual(a, v, dim);

            break;

        case '2':

            v = cargaArregloFloatRandom(a, v, dim);

            break;

        default:

            printf("\nFIN DE CARGA\n");
        }
        system("pause > arch");

    } while (op != 27);

    return v;
}

/***********************************************
 * \brief MUESTRA ARREGLO REAL
 * \param ARREGLO
 * \param VALIDO
 * \return VOID
 ***********************************************/

void muestraArregloFloat (float a[], int v)
{
    int i;
    printf("\nArreglo\n");

    for (i = 0; i < v; i++)
    {
        if (i % 15 == 0)
        {
            printf("\n");
        }
        printf(" %5.2f |", a[i]);
    }
}

/***********************************************
 * \brief CARGAR ARREGLO CHAR MANUALMENTE
 * \param ARREGLO
 * \param VALIDO
 * \param DIMENCION
 * \return VALIDO
 ***********************************************/

char cargaArregloCharManual (char a[], int v, int dim)
{
    char op;
    char letra;

    while (op != 27)
    {
        system("cls");
        printf("\nIngrese letra\n");
        fflush(stdin);
        scanf("%c", &letra);
        a[v] = letra;

        v++;
        printf("\n\t\tESC para salir......\n");
        op = getch();
        system("cls");
    }
    return v;
}

/***********************************************
 * \brief CARGAR ARREGLO CHAR RANDOM
 * \param ARREGLO
 * \param VALIDO
 * \param DIMENCION
 * \return VALIDO
 ***********************************************/

char cargaArregloCharRandom (char a[], int v, int dim)
{
    char letra;
    dim = rand() % DIM;

    printf("\nArreglo cargado\n");

    for (v = 0; v < dim; v++)
    {
        letra = rand() % (CHARMAX - CHARMIN + 1) + CHARMIN;
        a[v] = letra;
    }
    return v;
}

/***********************************************
 * \brief TIPO DE CARGA DE CARACTERES.
 * \param ARREGLO
 * \param VALIDO
 * \param DIMENCION
 * \return VALIDOS
 ***********************************************/

char tipoCargaChar (float a[], int v, int dim)
{
    char op;
    do {
        system("cls");
        printf("\n\t[ 1 ] - MANUAL\n");
        printf("\n\t[ 2 ] - RANDOM\n");
        printf("\n\t\t[ ESC ] - SALIR\n");

        op = getch();
        system("cls");

        switch (op)
        {
        case '1':

            v = cargaArregloCharManual(a, v, dim);

            break;

        case '2':

            v = cargaArregloCharRandom(a, v, dim);

            break;

        default:

            printf("\nFIN DE CARGA\n");
        }
        system("pause > arch");

    } while (op != 27);

    return v;
}

/***********************************************
 * \brief MUESTRA ARREGLO REAL
 * \param ARREGLO
 * \param VALIDO
 * \return VOID
 ***********************************************/

void muestraArregloChar (char a[], int v)
{
    int i;
    printf("\nArreglo\n");

    for (i = 0; i < v; i++)
    {
        if (i % 15 == 0)
        {
            printf("\n");
        }
        printf(" %c |", a[i]);
    }
}

/***************************************************
 * \brief SUMA DE LOS ELEMENTOS ENTEROS DEL ARREGLO
 * \param ARREGLO
 * \param VALIDO
 * \return SUMA
 ***************************************************/

int sumaElementosInt (int a[], int v)
{
    int suma = 0;

    for (int i = 0; i < v; i++)
    {
        suma = suma + a[i];
    }
    return suma;
}

/**************************************************
 * \brief SUMA DE LOS ELEMENTOS REALES DEL ARREGLO
 * \param ARREGLO
 * \param VALIDO
 * \return SUMA
 **************************************************/

float sumaElementosfloat (float a[], int v)
{
    int i;
    float suma = 0;

    for (i = 0; i < v; i++)
    {
        suma = suma + a[i];
    }

    return suma;
}



/**********************************************************
 * \brief SUMA DE LOS ELEMENTOS DE CARACTERES DEL ARREGLO
 * \param ARREGLO
 * \param VALIDO
 * \return SUMA
 **********************************************************/

char sumaElementoschar (char a[], int v)
{
    char suma = 0;

    for (int i = 0; i < v; i++)
    {
        suma = suma + a[i];
    }
    return suma;
}

/***********************************************
 * \brief PASO ARREGLO ENTERO A LA PILA
 * \param ARREGLO
 * \param VALIDO
 * \param PILA P *
 * \return VOID
 ***********************************************/

void arrayIntToPila (int a[], int v, Pila *p)
{
    int i;

    for (i = 0; i < v; i++)
    {
        apilar(p, a[i]);
    }
}

/***********************************************
 * \brief PASO ARREGLO REAL A LA PILA
 * \param ARREGLO
 * \param VALIDO
 * \param PILA P *
 * \return VOID
 ***********************************************/

void arrayRealToPila (float a[], int v, Pila *p)
{
    int i;

    for (i = 0; i < v; i++)
    {
        apilar(p, a[i]);
    }
}

/***********************************************
 * \brief PASO ARREGLO CHAR A LA PILA
 * \param ARREGLO
 * \param VALIDO
 * \param PILA P *
 * \return VOID
 ***********************************************/

void arrayCharToPila (char a[], int v, Pila *p)
{
    int i;

    for (i = 0; i < v; i++)
    {
        apilar(p, a[i]);
    }
}

/***********************************************
 * \brief MOSTRAR PILA ENTERA
 * \param PILA P *
 * \return VOID
 ***********************************************/

void muestroPilaInt (Pila p)
{
    Pila aux;
    inicpila(&aux);

    int i = 0;

    while(!pilavacia(&p))
    {
        if(i % 10 == 0)
        {
            printf("\n\t");
        }
        printf(" %3d |", tope(&p));
        apilar(&aux, desapilar(&p));
        i++;
    }
    printf("\n");
}

/***********************************************
 * \brief MOSTRAR PILA REAL
 * \param PILA P *
 * \return VOID
 ***********************************************/

void muestroPilaFloat (Pila p)
{
    Pila aux;
    inicpila(&aux);

    int i = 0;

    while(!pilavacia(&p))
    {
        if(i % 10 == 0)
        {
            printf("\n\t");
        }
        printf(" %6.2f |", tope(&p));
        apilar(&aux, desapilar(&p));
        i++;
    }
    printf("\n");
}

/***********************************************
 * \brief MOSTRAR PILA CHAR
 * \param PILA P *
 * \return VOID
 ***********************************************/

void muestroPilaChar (Pila p)
{
    Pila aux;
    inicpila(&aux);

    int i = 0;

    while(!pilavacia(&p))
    {
        if(i % 10 == 0)
        {
            printf("\n\t");
        }
        printf(" %c |", tope(&p));
        apilar(&aux, desapilar(&p));
        i++;
    }
    printf("\n");
}

/***********************************************
 * \brief BUSCAR ELEMENTO ENTERO EN EL ARREGLO
 * \param ARREGLO
 * \param VALIDO
 * \param INT DATO
 * \return FLAG
 ***********************************************/

int buscaElementoInt (int a[], int v, int dato)
{
    int flag = 0;
    int i;

    while (i < v && flag == 0)
    {
        if (a[i] == dato)
        {
            flag = 1;
        }
        i++;
    }
    return flag;
}

void funcionBuscarInt (int a[], int v)
{
    int dato;
    int encontrado;

    printf("\nIngrese el dato a buscar\n");
    printf("\nSe ingreso:\t");
    scanf("%d", &dato);

    encontrado = buscaElementoInt(a, v, dato);

    if (encontrado)
    {
        printf("\nEl elemento [ %d ] se encuentra en el arreglo\n", dato);

    } else {

        printf("\nEl elemento [ %d ] no se encuentra en el arreglo\n", dato);
    }
}

/***********************************************
 * \brief BUSCAR ELEMENTO REAL EN EL ARREGLO
 * \param ARREGLO
 * \param VALIDO
 * \param INT DATO
 * \return FLAG
 ***********************************************/

float buscaElementoFloat (float a[], int v, float dato)
{
    int i = 0;
    int flag = 0;

    while (i < v && flag == 0)
    {
        if (a[i] == dato)
        {
            flag = 1;
        }
        i++;
    }
    return flag;
}

void funcionBuscarFloat (float a[], int v)
{
    float dato;
    int encontrado;

    printf("\nIngrese el dato a buscar\n");
    printf("\nSe ingreso:\t");
    scanf("%f", &dato);

    encontrado = buscaElementoInt(a, v, dato);

    if (encontrado)
    {
        printf("\nEl elemento [ %.2f ] se encuentra en el arreglo\n", dato);

    } else {

        printf("\nEl elemento [ %.2f ] no se encuentra en el arreglo\n", dato);
    }
}

/***********************************************
 * \brief BUSCAR ELEMENTO CHAR EN EL ARREGLO
 * \param ARREGLO
 * \param VALIDO
 * \param CHAR DATO
 * \return FLAG
 ***********************************************/

char buscaElementoChar (float a[], int v, char dato)
{
    int i = 0;
    int flag = -1;

    while (i < v && flag == -1)
    {
        if (a[i] == dato)
        {
            flag = i;
        }
        i++;
    }
    return flag;
}

void funcionBuscarChar (char a[], int v)
{
    char encontrado;
    char dato;

    printf("\nBUSCAR CARACTER\n");
    printf("\nIngrese el caractre a buscar\n");
    scanf ("%s", &dato);

    encontrado = buscaElementoChar(a, v, dato);

    if (encontrado)
    {
        printf("\nEl caracter [ %c ] se encuentra en el arreglo\n", dato);
    }
    else
    {
        printf("\nEl caracter [ %c ] NO se encuentra en el arreglo\n", dato);
    }
}

/******************************************************
 * \brief INSERTAR ELEMENTO INT EN EL ARREGLO ORDENADO
 * \param ARREGLO
 * \param VALIDO
 * \param INT DATO
 * \return VALIDO + 1
 ******************************************************/

int insertarEntero (int a[], int v, int dato)
{
    int i = v-1;
    while(i>=0 && a[i]>dato){
        a[i+1]=a[i];
        i--;
    }
    a[i+1]=dato;

    return v + 1;
}

/******************************************************
 * \brief ORDENA EL ARREGLO INSERTADO.
 * \param ARREGLO
 * \param VALIDO
 * \return VOID
 ******************************************************/

void ordenaIntInsertado (int a[], int v)
{
    int i = 0;

    while (i < v-1)
    {
        insertarEntero(a, i, a[i+1]);
        i++;
    }
}

/******************************************************
 * \brief INSERTAR ELEMENTO FLOAT EN EL ARREGLO ORDENADO
 * \param ARREGLO
 * \param VALIDO
 * \param FLOAT DATO
 * \return VALIDO + 1
 ******************************************************/

int insertarReal (float a[], int v, float dato)
{
    int i = v-1;
    while(i>=0 && a[i]>dato){
        a[i+1]=a[i];
        i--;
    }
    a[i+1]=dato;

    return v + 1;
}

/******************************************************
 * \brief ORDENA EL ARREGLO INSERTADO.
 * \param ARREGLO
 * \param VALIDO
 * \return VOID
 ******************************************************/

void ordenaFloatInsertado (float a[], int v)
{
    int i = 0;

    while (i < v-1)
    {
        insertarReal(a, i, a[i+1]);
        i++;
    }
}

/******************************************************
 * \brief INSERTAR ELEMENTO CHAR EN EL ARREGLO ORDENADO
 * \param ARREGLO
 * \param VALIDO
 * \param CHAR DATO
 * \return VALIDO + 1
 ******************************************************/

int insertarChar (char a[], int v, char dato)
{
    int i = v-1;
    while(i>=0 && a[i]>dato){
        a[i+1]=a[i];
        i--;
    }
    a[i+1]=dato;

    return v;
}

/******************************************************
 * \brief ORDENA EL ARREGLO INSERTADO.
 * \param ARREGLO
 * \param VALIDO
 * \return VOID
 ******************************************************/

void ordenaCharInsertado (char a[], int v)
{
    int i=0;
    while(i<v-1){

        insertarChar(a,i,a[i+1]);
        i++;
    }
}












